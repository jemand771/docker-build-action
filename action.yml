name: "docker-build"
description: "Build docker image"
inputs:
  GITHUB_TOKEN:
    description: Token for accessing GHCR. Set to secrets. Set to GITHUB_TOKEN. Omit to disable docker login.
    required: false
  platforms:
    description: List of target platforms for docker buildx
    required: false
    default: linux/amd64,linux/arm64,linux/arm/v7
  images:
    description: List of names to tag the image with
    required: false
    default: |
      ghcr.io/${{ github.repository }}
  context:
    description: Context for buildx to use
    required: false
    default: .
  file:
    description: Path of the Dockerfile to use
    required: false
  push_strategy:
    description: How to publish images. Can be one of none, push, artifact
    required: false
    default: push
  args:
    description: arguments to pass to docker build (ARG in dockerfile)
    required: false
    default: ""
  tag-semver:
    description: whether to tag using semver, i.e. v1.2.3 turns into :1, :1.2, and :1.2.3
    required: false
    default: "true"
  tag-branch:
    description: whether to tag pushes to any branch as pr-<branch>
    required: false
    default: "true"
  tag-pr:
    description: whether to tag all PRs as pr-<number>
    required: false
    default: "true"
  tag-sha-short:
    description: whether to tag all commits as sha-<short hash>
    required: false
    default: "false"
  tag-sha-long:
    description: whether to tag all commits as sha-<hash>
    required: false
    default: "false"
  tag-datetime:
    description: whether to tag all builds with their build date and time
    required: false
    default: "false"
  tag-date:
    description: whether to tag all builds with their build date
    required: false
    default: "false"
  extra-tag-rules:
    description: extra rules to pass to docker/metadata-action
    required: false
    default: ""
  disable-cache:
    description: disable buildx docker cache
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.images }}
        flavor: |
          latest=false
        tags: |
          ${{ fromJSON(inputs.tag-semver) && 'type=semver,pattern={{major}}.{{minor}}.{{patch}}' || '' }}
          ${{ fromJSON(inputs.tag-semver) && 'type=semver,pattern={{major}}.{{minor}}' || '' }}
          ${{ fromJSON(inputs.tag-semver) && 'type=semver,pattern={{major}}' || '' }}
          ${{ fromJSON(inputs.tag-pr) && 'type=ref,event=pr,prefix=pr-' || '' }}
          ${{ fromJSON(inputs.tag-branch) && 'type=ref,event=branch,prefix=br-' || '' }}
          ${{ fromJSON(inputs.tag-sha-short) && 'type=sha,prefix=sha-' || '' }}
          ${{ fromJSON(inputs.tag-sha-long) && 'type=sha,prefix=sha-,format=long' || '' }}
          ${{ fromJSON(inputs.tag-datetime) && 'type=raw,prefix=dt-,value={{ date ''YYYY-MM-DD[T]HH-mm-ss[Z]'' }}' || '' }}
          ${{ fromJSON(inputs.tag-date) && 'type=raw,prefix=d-,value={{ date ''YYYY-MM-DD'' }}' || '' }}
          ${{ inputs.extra-tag-rules }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
    - name: Login to GitHub Container Registry
      if: ${{ inputs.GITHUB_TOKEN != '' && inputs.push_strategy == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.GITHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file == '' && format('{0}/Dockerfile', inputs.context) || inputs.file }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push_strategy == 'push' }}
        load: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: ${{ inputs.push_strategy == 'artifact' && 'type=oci,dest=image.tar' || 'type=image' }}
        build-args: ${{ inputs.args }}
        no-cache: ${{ fromJSON(inputs.disable-cache) }}
    - name: Store image list
      if: ${{ inputs.push_strategy == 'artifact' }}
      shell: bash
      run: echo "${{ steps.meta.outputs.tags }}" > docker-images.txt
    - name: Upload images
      if: ${{ inputs.push_strategy == 'artifact' }}
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: "image.tar"
    - name: Upload list
      if: ${{ inputs.push_strategy == 'artifact' }}
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: docker-images.txt
